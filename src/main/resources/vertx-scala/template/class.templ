@comment{"# Template for Scala code generation"}

@comment{"# Defines a few helper functions"}
@includeNamed{'common.templ'}
@includeNamed{'scala-helpers.templ'}

/*\n
 * Copyright 2014 Red Hat, Inc.\n
 *\n
 * Red Hat licenses this file to you under the Apache License, version 2.0\n
 * (the "License"); you may not use this file except in compliance with the\n
 * License.  You may obtain a copy of the License at:\n
 *\n
 * http://www.apache.org/licenses/LICENSE-2.0\n
 *\n
 * Unless required by applicable law or agreed to in writing, software\n
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT\n
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n
 * License for the specific language governing permissions and limitations\n
 * under the License.\n
 */\n\n

package @{ifacePackageName.replace("io.vertx.", "io.vertx.scala.")}\n
\n

@comment{"# Generate the imports"}
@foreach{importedType : importedTypes}
	@if{importedType.kind == CLASS_API}
		@if{!ifacePackageName.equals(importedType.packageName)}
import @{importedType.toString().replace("io.vertx.", "io.vertx.scala.").replace("*", "_")}\n
		@end{}
	@else{}
		@if{!importedType.packageName.equals("java.lang")}
import @{importedType}\n
		@end{}
	@end{}
@end{}
\n

@comment{"# Preemptive import"}
import scala.concurrent.Future\n\n

@comment{"# Generate the Class or Interface/Trait"}
@code{
  def getVarianceType(t) {
    return t;
  }

  def getClassNameWithTypeInfo(c, typeName) {
    var genericType = helper.getGenericType(c);
    if (genericType != null) {
      return typeName + '[' + getVarianceType(genericType) + ']';
    } else {
      return typeName;
    }
  }

  def getClassName(c) {
    var typeName = helper.getSimpleName(helper.getNonGenericType(c));
    return getClassNameWithTypeInfo(c, typeName);
  }

  def toScalaGeneric(c) {
    var typeName = helper.getNonGenericType(c);
    return getClassNameWithTypeInfo(c, typeName);
  }
}

@if{concrete}
	class @includeNamed{'writeType'}(private val delegate: @includeNamed{'writeDelegateType'})
@else{}
	trait @includeNamed{'writeType'}
@end{}

@comment{"## Inheritance"}
@if{abstractSuperTypes.size() > 0}
	 extends @foreach{abstractSuperType : abstractSuperTypes}@{abstractSuperType.name.replace('<', '[').replace('>',']')}@end{' with '}
@end{}

 {\n
\n

@comment{"# Generate the methods"}
@declare{'writeMethodParams'}
	@foreach{param : params}
		@if{!(param.type.kind == CLASS_HANDLER && param.type.args[0].kind == CLASS_ASYNC_RESULT)}
			@if{param.name.equals("type")}
				`@{param.name}`: @{toScalaType(param.type)}
			@end{}
			@if{!param.name.equals("type")}
				@{param.name}: @{toScalaType(param.type)}
			@end{}
		@end{}
	@end{', '}
@end{}

@code{
  objectMethods = staticMethods;
  hasObject = !objectMethods.isEmpty();
}

@foreach{method : instanceMethods}
	@if{!concrete}
		  def @{method.name}(@{methodParams(method);}): @{returnTypeOf(method);}\n\n
	@else{}
		@if{method.typeParams.isEmpty() && method.kind == METHOD_FUTURE}
			  def @{method.name}Async(@{methodParams(method);}): @{returnTypeOf(method);} = {\n
			    import io.vertx.lang.scala.FutureOps._\n
			    @{methodInvocationFuture('delegate', method);}
			  }\n\n
		@else{method.typeParams.isEmpty()}
			  def @{method.name}(@{methodParams(method);}): @{returnTypeOf(method);} = {\n
			    @{methodInvocation('delegate', method);}
			  }\n\n
		@else{method.kind == METHOD_FUTURE}
			  def @{method.name}Async@includeNamed{'writeTypeParamsWithVariance';typeParams=method.typeParams}(@{methodParams(method);}): @{returnTypeOf(method);} = {\n
			    import io.vertx.lang.scala.FutureOps._\n
			    @{methodInvocationFuture('delegate', method);}
			  }\n\n
		@else{}
			  def @{method.name}@includeNamed{'writeTypeParamsWithVariance';typeParams=method.typeParams}(@{methodParams(method);}): @{returnTypeOf(method);} = {\n
			    @{methodInvocation('delegate', method);}
			  }\n\n
		@end{}
	@end{}
@end{}

}\n
@if{hasObject}
	\n
	object @{type.raw.simpleName} {\n
	\n
	@foreach{method : objectMethods}
		@if{method.typeParams.isEmpty() && method.kind == METHOD_FUTURE}
			  def @{method.name}Async(@{methodParams(method);}): @{returnTypeOf(method);} = {\n
			    import io.vertx.lang.scala.FutureOps._\n
			    @{methodInvocationFuture(type.raw.name, method);}
			  }\n\n
		@else{method.typeParams.isEmpty()}
			  def @{method.name}(@{methodParams(method);}): @{returnTypeOf(method);} = {\n
			    @{methodInvocation(type.raw.name, method);}
			  }\n\n
		@else{}
			  def @{method.name}@includeNamed{'writeTypeParamsWithVariance';typeParams=method.typeParams}(@{methodParams(method);}): @{returnTypeOf(method);} = {\n
			    @{methodInvocation(type.raw.name, method);}
			  }\n\n
		@end{}
	@end{}
	}\n
@end{}
\n
